---
de: 
  desc: 
    author:
      Autor der aktuellen Seite.
  
    breadcrumb:
      @breadcrumb@-Attribut der aktuellen Seite.
      
    breadcrumbs:
      Gibt eine komplette Breadcrumb-Navigation bis zur aktuellen Seite aus. Der Separator
      spezifiziert das HTML-Fragment, das zwischen die einzelnen Breadcrumbs eingefügt wird.
      Der Default dafür ist @>@. Das bool'sche Attribut 'nolinks' kann verwendet werden, um die
      Breadcrumbs als reinen Text (ohne Links) anzuzeigen. Das kann zum Generieren des
      Title-Tags verwendet werden.

      *Verwendung&#58;*

      <pre><code><r:breadcrumbs [separator="separator_string"] [nolinks="true"] /></code></pre>
  
    children-count:
      Gibt die Gesamtzahl der Kinder dieser Seite aus.
  
    children-each:
      Gibt alle Kinder aus. Innerhalb dieses Tags werden alle Seitenattribut-Tags
      auf die aktuelle Kind-Seite gemappt.
      
      Mit @paginated="true"@ wird eine paginierte Liste ausgegeben. Die @will_paginate@-Optionen
      können ebenfalls angegeben werden, einschließlich 
      @per_page@, @previous_label@, @next_label@, @separator@, @inner_window@ und @outer_window@.

      *Verwendung&#58;*
      
      <pre><code><r:children:each [offset="number"] [limit="number"]
       [by="published_at|updated_at|created_at|slug|title|keywords|des</code><code>cription"]
       [order="asc|des</code><code>c"] [status="draft|reviewed|published|hidden|all"]
       [paginated="true"] [per_page="number"]>
       ...
      </r:children:each>
      </code></pre>

 
    children-each-child:
      Seiten-Attribut-Tags innerhalb dieses Tags beziehen sich auf das aktuelle Kind. Das ist
      manchmal nützlich, wenn man sich innerhalb eines anderen Tags befindet (z.B.  &lt;r&#58;find&gt;)
      und auf das aktuelle Kind zurückverweisen will.

      *Verwendung&#58;*
      
      <pre><code><r:children:each>
        <r:child>...</r:child>
      </r:children:each>
      </code></pre>
  
    children-each-header:
      Gibt den Tag-Inhalt nur aus, wenn er nicht mit dem vorherigen Header übereinstimmt.
      Sehr nützlich zum Anzeigen des Date-Headers für eine Liste von Kind-Seiten.

      Wenn mehrere Header-Blocks ausgegeben werden sollen, kann das @name@-Attribut
      für den Namen des Headers verwendet werden. Ein benamter Header wird nicht ausgegeben,
      bis ein anderer Header mit dem gleichen Namen einen anderen Inhalt hat.

      Mit dem @restart@-Attribut können andere Header zum Neustart verwendet werden,
      wenn sich der jetzige Header ändert. Dazu müssen die Namen der anderen Header
      in einer mit Semikolon getrennten Liste spezifiziert werden.

      *Verwendung&#58;*
      
      <pre><code><r:children:each>
        <r:header [name="header_name"] [restart="name1[;name2;...]"]>
            ...
        </r:header>
      </r:children:each>
      </code></pre>
  
    children-each-if_first:
      Gibt den Tag-Inhalt nur aus, wenn die aktuelle Seite das erste Kind im Kontext
      eines children&#58;each-Tag ist.
      
      *Verwendung&#58;*
      
      <pre><code><r:children:each>
        <r:if_first >
            ...
        </r:if_first>
      </r:children:each>
      </code></pre>
      
  
    children-each-if_last:
      Gibt den Tag-Inhalt nur aus, wenn die aktuelle Seite das letzte Kind im Kontext
      eines children&#58;each-Tag ist.
      
      *Verwendung&#58;*
      
      <pre><code><r:children:each>
        <r:if_last >
            ...
        </r:if_last>
      </r:children:each>
      </code></pre>
      
  
    children-each-unless_first:
      Gibt den Tag-Inhalt aus, bis die aktuelle Seite das erste Kind im Kontext
      eines children&#58;each-Tag ist.
      
      *Verwendung&#58;*
      
      <pre><code><r:children:each>
        <r:unless_first >
            ...
        </r:unless_first>
      </r:children:each>
      </code></pre>
      
  
    children-each-unless_last:
      Gibt den Tag-Inhalt aus, bis die aktuelle Seite das letzte Kind im Kontext
      eines children&#58;each-Tag ist.
      
      *Verwendung&#58;*
      
      <pre><code><r:children:each>
        <r:unless_last >
            ...
        </r:unless_last>
      </r:children:each>
      </code></pre>


    children-first:
      Gibt das erste Kind aus. Innerhalb dieses Tags werden alle Seitenattribut-Tags
      auf die erste Kind-Seite gemappt. Benutzt die selben Sortieroptionen wie
      @<r:children:each>@.

      *Verwendung&#58;*
      
      <pre><code><r:children:first>...</r:children:first></code></pre>
  
    children-last:
      Gibt das letzte Kind aus. Innerhalb dieses Tags werden alle Seitenattribut-Tags
      auf die erste Kind-Seite gemappt. Benutzt die selben Sortieroptionen wie
      @<r:children:each>@.

      *Verwendung&#58;*
      
      <pre><code><r:children:last>...</r:children:last></code></pre>
  
    children:
      Ermöglicht Zugriff auf alle Kinder der Seite.

      *Verwendung&#58;*
      
      <pre><code><r:children>...</r:children></code></pre>
  
    comment:
      Der Inhalt innerhalb eines Kommentar-Tags wird nicht ausgegeben.

      *Verwendung&#58;*

      <pre><code><r:comment>...</r:comment></code></pre>
  
    content:
      Gibt den Hauptinhalt einer Seite aus. Mit dem @part@-Attribut kann ein spezifischer
      Page-Part ausgewählt werden. Default für das @part@ Attribut ist 'body' 
      genommen. Das @inherit@-Attribut legt fest, daß wenn eine Seite keinen Content-Part
      mit diesem Namen besitzt, das Tag den entprechenden Content-Part der Eltern-Seite
      ausgibt. Der Default für @inherit@ ist 'false'. Das @contextual@-Attribut wird 
      benutzt, um die Auswertung des Parts einer vererbten Seite im Kontext der 
      Kind-Seite zu erzwingen. Der Default für @contextual@ ist 'true'.

      *Verwendung&#58;*
      
      <pre><code><r:content [part="part_name"] [inherit="true|false"] [contextual="true|false"] /></code></pre>
  
    cycle:
      Gibt einen der übergebenen Werte basierend auf einem globalen Zyklus-Zähler aus. Das
      @reset@-Attribut setzt den Zähler auf den Anfang zurück. Mit dem @name@-Attribut
      können mehrere Zyklen benutzt werden. Der Default dafür ist 'cycle'.

      *Verwendung&#58;*
      
      <pre><code><r:cycle values="first, second, third" [reset="true|false"] [name="cycle"] /></code></pre>
  
    date:
      Gibt das Datum der aktuellen Seite aus (als Default wird das Anlege- oder Publikations-Datum
      genommen). Das @format@-Attribut benutzt die Format-Codes der Ruby-Funktion @strftime@. Als
      Default dient '&#37;A, &#37;B &#37;d, &#37;Y'. Das @for@-Attribut bestimmt das Datum,
      das ausgegeben wird. Die gültigen Optionen sind @published_at@, @created_at@, @updated_at@, und @now@.
      @now@ gibt das (von der Seite unabhängige) aktuelle Datum/Zeit aus. 

      *Verwendung&#58;*

      <pre><r:date [format="%A, %B % d, %Y"] [for="published_at"]/></pre>
  
    escape_html:
      Escaped spitze Klammern, damit sie als HTML ausgegeben werden können.

      *Verwendung&#58;*

      <pre><code><r:escape_html>...</r:escape_html></code></pre>
  
    find:
      Innerhalb dieses Tags beziehen sich alle seitenabhängigen Tags auf die Seite, die
      das @url@-Attribut bezeichnet. @url@s können relative oder absolute Pfade sein.

      *Verwendung&#58;*

      <pre><code><r:find url="value_to_find">...</r:find></code></pre>
 
    gravatar:
      Gibt den Gravatar des Seitenautors aus.

      *Verwendung&#58;*

      <pre><code> <r:gravatar /></code></pre>

      Oder

      <pre><code> <r:gravatar [name="User Name"] [rating="G | PG | R | X"] [size="32px"] /> </code></pre>

 
    if_ancestor_or_self:
      Gibt die enthaltenen Elemente aus, wenn der aktuelle Seitenkontext entweder die tatsächliche Seite
      oder eine der Elternseiten ist.
     
      Wird typischerweise innerhalb eines anderen Tags wie (&lt;r&#58;children&#58;each&gt;) verwendet,
      um Markup auszugeben, wenn das Kind-Element von der aktuellen Seite abstammt.

      *Verwendung&#58;*
      
      <pre><code><r:if_ancestor_or_self>...</r:if_ancestor_or_self></code></pre>
  
    if_children:
      Gibt die enthaltenen Elemente nur aus, wenn der Seitenkontext ein oder mehrere Kind-Seiten
      hat. Das @status@-Attribut schränkt die gefundenen Kind-Seiten auf den angegebenen Status
      ein. Default dafür ist @published@. Mit @status="all"@ werden alle nicht-virtuellen Kind-Seiten
      unabhängig vom Status gefunden.

      *Verwendung&#58;*
      
      <pre><code><r:if_children [status="published"]>...</r:if_children></code></pre>
  
    if_content:
      Gibt die enthaltenen Elemente nur aus, wenn alle angegebenen Parts auf der Seite
      existieren. Default ist @body@, es können aber auch mehrere Parts als durch Kommas getrennte
      Liste angegeben werden. Wird das optionale @inherit@-Attribut auf @true@ gesetzt,
      werden Kinder unabhängig von jedem Part gefunden. Default dafür ist @false@.

      Wird mehr als ein Part ausgegeben, kann das @find@-Attribut auf den Wert @any@ gesetzt
      werden, damit die enthaltenen Elemente ausgegeben werden, wenn irgendeiner der angegebenen
      Parts gefunden werden. Default für dieses Attribut ist @all@.

      *Verwendung&#58;*
      
      <pre><code><r:if_content [part="part_name, other_part"] [inherit="true"] [find="any"]>...</r:if_content></code></pre>
  
    if_dev:
      Gibt die enthaltenen Elemente nur aus, wenn Radiant gerade im development-Modus läuft.

      *Verwendung&#58;*

      <pre><code><r:if_dev>...</r:if_dev></code></pre>
  
    if_parent:
      Gibt die enthaltenen Elemente nur aus, wenn die aktuelle Seite Eltern hat, d.h. es handelt
      sich nicht um die Startseite.

      *Verwendung&#58;*
      
      <pre><code><r:if_parent>...</r:if_parent></code></pre>
  
    if_self:
      Gibt die enthaltenen Elemente nur aus, falls der aktuelle Seitenkontext auch 
      die aktuelle Seite ist.

      Wird typischerweise innerhalb eines anderen Tags (wie &lt;r&#58;children&#58;each&gt;) 
      benutzt, um zusätzlichen Markup auszugeben, falls das Kind-Elemente die aktuelle Seite ist.

      *Verwendung&#58;*
      
      <pre><code><r:if_self>...</r:if_self></code></pre>
  
    if_url:
      Gibt die enthaltenen Elemente nur aus, falls die Seiten-URL den im @matches@ angegebenen
      regulären Ausdruck matcht. Ist @ignore_case@ auf 'false' gesetzt wird dabei Groß-/Kleinschreibung
      beachtet. Default für @ignore_case@ ist 'true'.

      *Verwendung&#58;*
      
      <pre><code><r:if_url matches="regexp" [ignore_case="true|false"]>...</r:if_url></code></pre>
  
    link:
      Gibt einen Link auf die Seite aus. Als Einzel-Tag wird der Seitentitel als
      Link-Name benutzt. Als Doppel-Tag wird der Text zwischen den beiden Tags als
      Link-Name genommen. Das link-Tag reicht alle Attribute an das HTML-@a@-Tag 
      weiter. Das ist nützlich, um Attribute wie @class@ oder @id@ weiterzureichen.
      Falls das @anchor@-Attribut and das Tag weitergereicht wird, hängt es ein
      Pound-Zeichen (<code>#</code>) gefolgt vom Wert des Attributs des HTML-@a@-Tag
      @href@-Attributs. Dadurch wird ein HTML-Anchor erzeugt.

      *Verwendung&#58;*

      <pre><code><r:link [anchor="name"] [other attributes...] /></code></pre>
      
      oder
      
      <pre><code><r:link [anchor="name"] [other attributes...]>link text here</r:link></code></pre>
  
    markdown:
      Der Inhalt wird mit dem Markdown-Filter gefiltert.

      *Verwendung&#58;*

      <pre><code><r:markdown>** bold text **</r:markdown></code></pre>

      erzeugt

      <pre><code><strong> bold text </strong></code></pre>
  
    meta-description:
      Gibt das Seitenbeschreibungsfeld als Meta-Tag aus, solange 'tag'
      auf 'false' gesetzt ist.

      *Verwendung&#58;*

      <pre><code> <r:meta:des</code><code>cription [tag="false"] /> </code></pre>
  
    meta-keywords:
      Gibt die Keywords der Seite als Meta-Tag aus, solange 'tag'
      auf 'false' gesetzt ist.

      *Verwendung&#58;*

      <pre><code> <r:meta:keywords [tag="false"] /> </code></pre>
  
    meta:
      Der Namensraum des 'meta'-Attributs. Falls als Einzeltag genutzt, werden sowohl
      Beschreibungs- und Keyword-Felder als &lt;meta /&gt;-Tags ausgegeben, solange
      das Attribut 'tag' auf 'false' gesetzt ist.

      *Verwendung&#58;*

      <pre><code> <r:meta [tag="false"] />
       <r:meta>
         <r:des</code><code>cription [tag="false"] />
         <r:keywords [tag="false"] />
       </r:meta>
      </code></pre>
  
    navigation-if_first:
      Gibt die enthaltenen Elemente aus, falls das Element das erste Element in der
      Navigationsliste ist.

      *Verwendung&#58;*

      <pre><code><r:normal><r:if_first>...</r:if_first></r:normal></code></pre>
  
    navigation-if_last:
      Gibt die enthaltenen Elemente aus, falls das Element das letzte Element in der
      Navigationsliste ist.

      *Verwendung&#58;*

      <pre><code><r:normal><r:if_last>...</r:if_last></r:normal></code></pre>
  
    navigation-unless_first:
      Gibt die enthaltenen Elemente aus, falls das Element nicht das erste Element in der
      Navigationsliste ist.

      *Verwendung&#58;*

      <pre><code><r:normal><r:unless_first>...</r:unless_first></r:normal></code></pre>
  
    navigation-unless_last:
      Gibt die enthaltenen Elemente aus, falls das Element nicht das letzte Element in der
      Navigationsliste ist.

      *Verwendung&#58;*

      <pre><code><r:normal><r:unless_last>...</r:unless_last></r:normal></code></pre>
  
    navigation:
      Gibt eine Liste von Links (spezifiziert im @url@-Attribut) anhand der folgenden
      drei Stati aus&#58;

      * @normal@ spezifiziert den normalen Link-Status

      * @here@ spezifiziert den Link-Status, falls die URL die aktuelle Seiten-URL matcht

      * @selected@ spezifiziert den Link-Status, wenn die aktuelle Seite ein Kind der
        spezifizierten URL ist

      # @if_last@ gibt den Inhalt innerhalb eines  @normal@, @here@ or
        @selected@ Tags aus, falls das Element das letzte Navigationselement ist.

      # @if_first@ gibt den Inhalt innerhalb eines  @normal@, @here@ or
        @selected@ Tags aus, falls das Element das erste Navigationselement ist.
     
      Das @between@-Tag legt fest, was zwischen den Links ausgegeben wird.  

      *Verwendung&#58;*

      <pre>
        <code>
        <r:navigation urls="[Title</code>:<code> url | Title</code>:<code> url | ...]">
        <r:normal><a href="<r:url />"><r:title /></a></r:normal>
        <r:here><strong><r:title /></strong></r:here>
        <r:selected><strong><a href="<r:url />"><r:title /></a></strong></r:selected>
        <r:between> | </r:between>
      </r:navigation>
      </code>
      </pre>


  
    page:
      Legt fest, daß Tags, die auf Seitenattribute verweisen, sich auf die aktuelle
      Seite beziehen.

      *Verwendung&#58;*
      
      <pre><code><r:page>...</r:page></code></pre>

    pagination:
      Dieses Tag wird normalerweise nicht direkt aufgerufen. Mit dem Attribut @pagination="true"@  
      wird eine Liste beim Anzeigen automatisch paginiert.

      *Verwendung&#58;*

      <pre><code>
      <r:children:each paginated="true" per_page="50">
          <r:child>...</r:child>
        </r:children:each>
      </code></pre>
      
    parent:
      Seitenattribut-Tags innerhalb dieses Tags verweisen auf die Elternseite der
      aktuellen Seite.

      *Verwendung&#58;*
      
      <pre><code><r:parent>...</r:parent></code></pre>
  
    random:
      Gibt zufällig eine der im @option@-Tag spezifizierten Optionen aus.

      *Verwendung&#58;*

      <pre><code><r:random>
        <r:option>...</r:option>
        <r:option>...</r:option>
        ...
      <r:random>
      </code></pre>
  
    rfc1123_date:
      Das Datum wird im RFC1123-Format ausgegeben (Ideal für RSS-Feeds).

      *Verwendung&#58;*

      <pre><code><r:rfc1123_date /></code></pre>
  
    slug:
        Gibt das @slug@-Attribut der aktuellen Seite aus.
      
    smarty_pants:
      Inhalt wir mit dem Smarty-Pants-Filter gefiltert.

      *Verwendung&#58;*

      <pre><code><r:smarty_pants>"A revolutionary quotation."</r:smarty_pants></code></pre>

      gibt folgendes aus&#58;

      <pre><code> </code>&#8220;<code>A revolutionary quotation.</code>&#8221;<code> </code></pre>
  
    snippet:
      Gibt das im @name@-Attribut angegebene Snippet im Seitenkontext aus.

      *Verwendung&#58;*

      <pre><code><r:snippet name="snippet_name" /></code></pre>

      Falls als Doppel-Tag benutzt, kann der Teil innerhalb der beiden Tags
      im Snippet selbst benutzt werden. Im Falle von @<r:yield/>@ wird er
      ersetzt.

      *Verwendung&#58;*

      <pre><code><r:snippet name="snippet_name">Lorem ipsum dolor...</r:snippet></code></pre>
  
    status:
      gibt den Status der Seite als String aus. Das optionale Attribut 'downcase'
      gibt den Status in Kleinbuchstaben aus. 

      *Verwendung&#58;*

      <pre><code><r:status [downcase='true'] /></code></pre>
  
    textile:
      Inhalt wir mit dem Textile-Filter gefiltert.

      *Verwendung*&#58;

      <pre><code><r:textile>
      * Erster
      * Zweiter
      </r:textile></code></pre>

      erzeugt&#58;

      <pre><code><ul>
        <li>Erster</li>
        <li>Zweiter</li>
      </ul></code></pre>
  
    title:
        Gibt das @title@-Attribute der aktuellen Seite aus.
      
    unless_ancestor_or_self:
      Gibt die enthaltenen Elemente solange aus, bis der aktuelle Seitenkontext
      entweder die tatsächliche Seite oder eines ihrer Eltern ist.

      Wird typischerweise innerhalb eines anderen Tags (wie &lt;r&#58;children&#58;each&gt;) 
      benutzt, um zusätzlichen Markup auszugeben, bis der aktuelle Seitenkontext
      entweder die tatsächliche Seite oder einer seiner Eltern ist.

      *Verwendung&#58;*
      
      <pre><code><r:unless_ancestor_or_self>...</r:unless_ancestor_or_self></code></pre>
  
    unless_children:
      Gibt die enthaltenen Elemente nur aus, wenn der aktuelle Seitenkontext
      keine Kinder hat. Mit dem @status@-Attribut kann der Status der gefundenen
      Kind-Seiten auf den angegebenen Status beschränkt werden. Default dafür
      ist @published@. @status@="all" erfasst alle nicht-virtuellen Seiten.

      *Verwendung&#58;*
      
      <pre><code><r:unless_children [status="published"]>...</r:unless_children></code></pre>
  
    unless_content:
      Das Gegenteil des @if_content@-Tags. 
      Gibt die enthaltenen Elemente nur aus, wenn keiner der angegebenen Parts auf der Seite
      existiert. Es können mehrere Parts als mit Komma getrennte Liste angegeben werden. 
      Wird das optionale @inherit@-Attribut auf 'true' gesetzt,
      werden Kinder unabhängig von jedem Part gefunden. Default für @inherit@ ist @false@.
      
      Wenn mehr als ein Part angegeben ist, kann das optionale @find@-Attribut auf @any@
      gesetzt werden. Damit wird ein Element nicht ausgegeben, wenn irgendeiner der angegebenen
      Parts gefunden wird. Default für das @any@-Attribut ist @all@.

      *Verwendung&#58;*
      
      <pre><code><r:unless_content [part="part_name, other_part"] [inherit="false"] [find="any"]>...</r:unless_content></code></pre>
  
    unless_dev:
      Das Gegenteil des @if_dev@ Tags.

      *Verwendung&#58;*

      <pre><code><r:unless_dev>...</r:unless_dev></code></pre>
  
    unless_parent:
      Gegenteil von if_parent.  Gibt die enthaltenen Elemente nur aus, wenn die aktuelle 
      Seite keine Eltern hat, d.h. es handelt sich um die Startseite.

      *Verwendung&#58;*
      
      <pre><code><r:unless_parent>...</r:unless_parent></code></pre>
  
    unless_self:
      Zeigt die enthaltenen Elemente nur an, wenn der Seitenkontext nicht die aktuelle Seite ist.

      Wird typischerweise innerhalb eines anderen Tags (wie &lt;r&#58;children&#58;each&gt;) 
      benutzt, um zusätzlichen Markup auszugeben, falls das Kind-Elemente nicht die aktuelle Seite ist.

      *Verwendung&#58;*

      <pre><code><r:unless_self>...</r:unless_self></code></pre>
  
    unless_url:
      Gegenteil des @if_url@ Tags.

      *Verwendung&#58;*
      
      <pre><code><r:unless_url matches="regexp" [ignore_case="true|false"]>...</r:unless_url></code></pre>
  
    url:
      Gibt das @url@-Attribut der aktuellen Seite aus.
  
    yield:
      Wird innerhalb eines Snippets als Platzhalter für die Ersetzung von Kind-Inhalten
      verwendet, falls das Snippet als Doppel-Tag aufgerufen wird.

      *Verwendung (Innerhalb eines Snippets)&#58;*
      
      <pre><code>
      <div id="outer">
        <p>vorher</p>
        <r:yield/>
        <p>danach</p>
      </div>
      </code></pre>

      Heißt das obige Snippet "yielding", kann es von jeder Seite, Layout oder
      Snippet wie folgt aufgerufen werden&#58;

      <pre><code><r:snippet name="yielding">Inhalt innerhalb..</r:snippet></code></pre>

      Erzeugt folgenden Output&#58;

      <pre><code>
      <div id="outer">
        <p>vorher</p>
        Inhalt innerhalb..
        <p>danach</p>
      </div>
      </code></pre>

      Ein Aufruf von @<r:yield/>@ im Seitenkontext oder Layout erzeugt keinen Output.
  
